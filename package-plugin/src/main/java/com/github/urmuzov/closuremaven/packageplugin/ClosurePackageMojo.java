package com.github.urmuzov.closurepackagemavenplugin;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.maven.artifact.Artifact;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.*;
import java.util.Map.Entry;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.zip.ZipException;

/**
 * Goal which touches a timestamp file.
 *
 * @goal copy
 * 
 * @phase process-resources
 */
public class ClosurePackageMojo extends AbstractMojo {

    /**
     * Location of the file.
     * @parameter expression="${project.build.directory}"
     * @required
     */
    private String buildDirectory;
    /**
     * @parameter default-value="${project}"
     */
    private MavenProject mavenProject;
    /**
     * Location of the file.
     * @parameter expression="false"
     * @required
     */
    private boolean logEnabled;
    /**
     * Closure Packages
     * @parameter
     */
    private Map<String, String> closurePackages;

    public void execute() throws MojoExecutionException, MojoFailureException {
        info("closurePackages: " + closurePackages);
        /**
         * This project closure-packages
         */
        try {
            Properties props = new Properties();
            for (Entry<String, String> e : closurePackages.entrySet()) {
                FileUtils.copyDirectory(new File(buildDirectory + "/classes/" + e.getValue().replace(".", "/")), new File(buildDirectory + "/closure"));
                props.setProperty(e.getKey(), e.getValue());
            }
            File out = new File(buildDirectory + "/classes/META-INF/closure-packages.properties");
            out.getCanonicalFile().getParentFile().mkdirs();
            props.store(new FileOutputStream(out), "Auto generated by Maven ClosurePackage Plugin");
        } catch (IOException ex) {
            throw new MojoFailureException("Project closure-packages copy error", ex);
        }

        /**
         * Closure-packages from dependencies
         */
        Set<Artifact> deps = mavenProject.getDependencyArtifacts();
        try {
            for (Artifact a : deps) {
                if (a.getScope().equals("test")) {
                    continue;
                }
                ClassLoader classLoader = new URLClassLoader(new URL[]{a.getFile().toURI().toURL()});
                File artifactFile = a.getFile();
                if (!artifactFile.isFile()) {
                    getLog().info("Skipping artifact: " + a + " (" + artifactFile.getPath() + " not a file)");
                    continue;
                }
                JarFile artifactJar = new JarFile(artifactFile);
                JarEntry closurePackagesEntry = artifactJar.getJarEntry("META-INF/closure-packages.properties");
                if (closurePackagesEntry == null) {
                    continue;
                }
                Properties props = new Properties();
                InputStream propsStream = classLoader.getResourceAsStream(closurePackagesEntry.getName());
                props.load(propsStream);
                propsStream.close();
                for (String key : props.stringPropertyNames()) {
                    String closurePackageResource = props.getProperty(key);
                    info("Closure-Package " + closurePackageResource + " found in " + artifactFile.getPath() + ")");
                    Enumeration<JarEntry> e = artifactJar.entries();
                    List<String> fileNames = new ArrayList<String>();
                    while (e.hasMoreElements()) {
                        fileNames.add(e.nextElement().getName());
                    }
                    Collections.sort(fileNames);
                    for (String fileName : fileNames) {
                        if (fileName.startsWith(closurePackageResource)) {
                            File out = new File(buildDirectory + "/closure/" + fileName.substring(closurePackageResource.length()));
                            if (fileName.endsWith("/")) {
                                info("Dir: " + fileName);
                                out.mkdirs();
                            } else {
                                info("File: " + fileName);
                                InputStream is = classLoader.getResourceAsStream(fileName);
                                FileOutputStream os = new FileOutputStream(out);
                                IOUtils.copy(is, os);
                                is.close();
                                os.close();
                            }
                        } else {
                            info("Filtered: " + fileName);
                        }
                    }
                }
                artifactJar.close();
            }
        } catch (ZipException e) {
            throw new MojoFailureException("Unpacking jar error", e);
        } catch (IOException e) {
            throw new MojoFailureException("Can't access sources inside jar file", e);
        }
    }

    private void info(String str) {
        if (logEnabled) {
            getLog().info(str);
        }
    }
}
